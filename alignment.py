
from Bio import Align,SeqIO,Entrez
from itertools import combinations # for iterating over all combinations.
from typing import List
import pandas as pd
baboon = "CTCCAGCCCCACCTGAACTCACCCCCAGGACCCCGCCACAAACCCCCCGTCTCCGCCTCCGGCGGGCCGAAGGTCAGGATGGGCCCTTCCACCTGCAATCTTCCCTTTTTCCCCTTCGCACGGTCAACCGCACGGTCAAACGCACGATCCAGTACTGGCCCTTTTCTGCCTCGGACCTCTATAATTGGAAAACCCATAACCCCTCCTTTTCCCAAGACCCCCAGGCCTTGACCTCGTTGATAGAATCAATTCTCCTCACCCACCAGCCTACCTGGGATGATTGTCAACAGCTTTTGCAGGTCCTTCTAACCACCGAAGAAAGGCAGCGAGTCCTCCTGGAAGCCCGGAAAAATCTGCCCCGGCCTGGAGGCCTTCCAACCCAGCTCCCCAATGAAATAGACGAGGGATTTCCCCTCACCCGCCCGGACTGGGATTATGAGACAGCACCGGGTAGGGAGAGTCTCCGAATCTATCGCCAGGCTCTGTTGGCGGGTCTCAAGGGGGCAGGAAAACGCCCCACCAATTTGGCCAAGGTAAGGACTATAACTCAGGGAAAAGATGAAAGCCCGGCAGCCTTTATGGAAAGACTTCTGGAAGGGTTTCGAATGTATACTCCATTTGATCCAGAAGCACCAGAACACAAGGCTACCGTGGCCATGTCGTTCATAGATCAGGCAGCACTAGACATAAAAGGAAAACTCCAAAGGCTAGACGGGATCCAAACTCATGGGCTGCAGGAATTAGTAAGGGAGGCAGAAAAGGTATACAATAAAAGGGAAACCCCAGAAGAAAGAGAAGCTAGGCTTATAAAAGAACAGGAAGAACGGGAAGTCGGAGAGACAGAAAAAGAGATAAGCATTTACCAAAATCTGGCAGCCGTAGTGACTGAAAAAAGGGCAGGAAAGTCAGGGGAAACAAGAAGGCGGCCTAAAGTAGATAAGGACCAGTGCGCCTACTGCAAAGAGCGAGGGCATTGGACCAAGGACTGCCCCAAGCCTCCTAGAGACCAGAAGAAACCCGCCCCTGTCCTCACCTTAGGTGAGGACAGCGAATAGGGGTGTCAGGGCTCTGGAGCCCCCCCCGAGCCCCGGCTAACTCTATCTGTAGGGGGGCATCCCACCACCTTCTTGGTGGACACAGGCGCCCAACACTCGGTTTTGACCAAGGCAAACGGACCCCTGTCCTCTCGTACATCTTGGGTCCAGGGGGCAACAGGAAGAAAGATGCACAAATGGACTAACCGCCGGACAGTTAACCTAGGGCAAGGAATGGTGACACACTCCTTCTTGGTGGTACCTGAATGTCCGTACCCCCTTCTGGGGCGAGATCTCCTAACCAAACTCGGAGCTCAGATCCACTTCTCCGAGGCAGGGGCCCAGGTGTTAGACCGAGATGGCCAACCCATCCAAATTTTGACTGTGTCTCTGCAAGATGAACACCGGCTTTTTGACATCCCGGTCACCACCAGCCTCC"
cat = "CTCCAGCCCCACCCGATCTAACTCCCCAGACCCCACCTCAGACCCCCCGCCTCCGTCTCCGGCGATCGGACGACCCGAACGGCCCTCCCACTTGGCAATCTTCCCTGTTTCCTCTCCGGACAGTCAACCGGACTGTCCAATATTGGCCATTTTCTGCATCCGATCTCTATAATTGGAAAACTCATAACCCTTCCTTTTCCCAAGAACCCCAGGCCCTAACCTCACTAATAGAGTCTATCCTCCTCACACACCAGCCTACCTGGGACGACTGCCAGCAGCTCTTACAGGTCCTTTTGACTACCGAGGAAAGGCAACGAGTTCTCCTGGAGGCCCGGAAAAATGTGCCGGGGCCTGGAGGTCTTCCAACTCAGCTTCCCAATGAAATAGATGAAGGGTTTCCCCTCACCCGCCCGGACTGGGACTATGAAACGGCTCCAGGTAGGGAGAGTCTCCGAATCTATCGCCAGGCTCTGTTGGCGGGTCTCAAGGGGGCAGGGAAACGGACCATAATCCAAGGAAAAGAGGAGAGCCCCGCAGCCTTTATGGAACGGCTTCTAGAGGGGTTTCGGATGTATACTCCATTTAACCCCGAGGCTCCAGAACATAAGGCTACCGTGGCCATGTCATTCATAGATCAGGCAGCGTCTGATATAAAAGGAAAGCTCCAACGGCTAGATGGGATTCAAACCTATGGGTTGCAGGAACTAGTTAGGGAGGCAGAAAAGGTATATAACAAAAGGGAGACCCCAGAGGAAAAGGAGGCTAGGCTAGCAAAAGAGCAGGAAGCACGGGAGGAACGAAGAGATCGAAAGAGAGATAAACATTTAACCAAAATCCTGGCAGCTGTAGTGACAGAAAACGGAACAGGAAAGTCAGGGGAAACGAAGAGGCGGCCCAAAGTAGGAAAAGACCAGTGCGCCTATTGCAAAGAACGCGGGCACTGGATCAAAGACTGCCCTAAGCGCCCCGGGAACTCAAAGAAACCTGCCTCTGTGCTCGCCTTAGGCGAAGAGAGCGAATAGGGATGTCAGGGCTCCGGAGCCCCCCCCGAGCCCCGGCTAACCCTATCTGTAGGGGGGCATCCCACCACCTTCCTGGTGGACACGGGAGCTCAACACTCGGTCTTAACCAAGGCAAATGGGCCTCTGTCCTCGCGTACCTCCTGGGTCCAAGGAGCGACAGGAAGAAAAATTCACAAATGGACTAACCGCCGCACGGTTGACTTAGGGCAAGGGACGGTGACACACTCCTTTCTGGTGGTACCCGAATGCCCGTACCCCCTTCTGGGACGAGACCTCCTAACCAAGCTTGGAGCCCAGATACACTTCTCCGAAACGGGGGCCCAAGTGCTAAACCGGGATGGCCAGCCTATCCAAGTCTTAACTGTGTCCTTACAAGACGAACACAGACTTTTTGAAACCCCGGTCACCACTAACCTCC"
macaque = "CCTCCCTCCACCCCATCTCCTTCTCCAGCCCCGCCCAAACTCACCCATCGGACGCCGCCACCGACACCTCCTCGTCTCCGCTTGCGGCGGACTGAGGACCCAGATGGCCCTTCCACTTGGCAATCCTCCCTTTTTCCCCTCTGTACCGTCAATCGCACGGTCCAGTACTGGCCCTTCTCTGCCTCTGACCTCTACAACTGGAAAACCCATAACCCTTCCTTTTCCCAAGACCCCCAGGCCCTAACCTCGTTGATAGAATCCATTCTCCTCACTCACCAGCCCACTTGGGATGATTGCCAGCAACTCTTGCAGGTCCTCCTAACCACTGAAGAAAGGCAGCGAGTCCTCCTGGAGGCCCGGAAAAATGTGCCAGGACCAGGAGGCCTCCCAACCCAACTTCCCAATGAAATAGACGAGGGATTTCCCCTCACCCGCCCGGACTAGGACTATGAAACGGCACCAGGTAGGGAGAGTCTCCGAATCTATCGCCAGGCTCTGTTGGCGGGTCTCAAAGGGGCAGGAAAGCACCCCACAAATTTGGCCAAGGTAAGGACCATAACTCAGGAAAGGGACGAAAGCCCAGCAGCCTTCATGGAAAGGCTTCTGCAAGGGTTCCGAATGTATACCCCATTCGATCCAGAGGCCCTAGAACATAAGGCTACCGTAGCTATGGCATTCATAGACCAAGCTGCATTAGATATCAAAGGAAAACTCCAAAGGCTAGATGGGATCCAAACCTATGGATTACAGGAATTGGTTAAGGAGGCAGAAAAAGTGTATAATAAGAGAGAAACCCCTGAGGGAAGGGAAGCCAGGTTAGCGAAGGAACAGATGGAGCGAGAGGATTGTAGGGACCGAGTGAGGGATAAGCATTTAACAAAAATCCTGGCGGCAGTTGTGAGAGAGAAAGGACCAGGGAGAGAGGGAGAGAAGCGGAGGCGGCCAAAAGTGGAAAAAGACCAGTGTGCCTACTGCAAAGAACGGGGACATTGGATCAAAGATTGCCCCAAGCGTCCTAAAGACCAAAAGAAACCTGCCGCTGTCCTCACCCTAGGTGAAGATAGTGAATAGGGGTGTCAAGGCTCTGGAGCCCCCCCCGAGCCCCAGCTAACTCTCTCTGTAGGGGGGCACCCCACCACCTTCTTGGTGGACACAGGGGCCCAACCTTCAGTTTTGACAAAGGCAGACGGGCCCGTGTCTTCCCGCACATCCTGGGTCCAGGGGGCAACAGGGGGAAAATTGCACAAGTGGACTAACCTCCGGACAGTTAATCTTGGACGAGGAATGGTGACACATTCCTTCTTGGTGGTACCTGAATGCCCATAGCCCCTCCTAGGGCGAGATCTTCTGACCAAGCTCGGAGCCCAAATCCATTTCTCCGAGACAGGGGCCCAGGTATTAAATTGGGACCGTCAGCCCATCCAAATCTTAACTGTGTCTCTGCAAGATGAATATCGGCTTTTTGACGCTCCAGTCATCACTAGCCTCC"


# checks for parity between the combenations of the list of sequences given.
def check_parity_given_sequences(sequences_got:List[str],scoring_factors:List[int]):
    if len(scoring_factors) != 0:
        aligner.match_score = scoring_factors[0]
        aligner.mismatch_score = scoring_factors[1]
        aligner.open_gap_score = scoring_factors[2]
        aligner.extend_gap_score = scoring_factors[3]
    for i in combinations(sequences_got,2):    
        print(aligner.score(seqA=i[0],seqB=i[1]))
        print(make_aligner_table(i[0],i[1]))


# returns a list of sequences from the given accesion numbers
def get_fasta_files(accesion_numbers:List[str]):
    Entrez.email = "nitzanmr@gmail.com"
    fasta_files = []
    returned_sequences = []
    for i in accesion_numbers:
        fasta_files.append(Entrez.efetch(db="nucleotide", id=i, rettype="FASTA", retmode="text"))
        for record in SeqIO.parse(fasta_files[-1], "fasta"):
            # print("%s %i" % (record.seq, len(record)))
            returned_sequences.append(record.seq)
    return returned_sequences   
    
def make_aligner_table(seq1:str,seq2:str):
    returned_table:dict = {}
    
    alignments = aligner.align(seq1, seq2)
    
    returned_table["matches"] = aligner.match_score
    returned_table["mismatches"] = aligner.mismatch_score
    returned_table["gaps1"] = aligner.query_internal_open_gap_score
    returned_table["gaps2"] = aligner.query_internal_extend_gap_score
    return returned_table
    
    
        
aligner = Align.PairwiseAligner()
    
sequences_got = get_fasta_files(["AF451972", "AF176731", "X90314"]) # List[str] that represent the sequence asked here

check_parity_given_sequences(sequences_got,[2,-1,0,0])
# we can see the best alignment is between AF176731 and X90314 here and the score is 282


check_parity_given_sequences([baboon,cat,macaque],[])
# we can see the best alignment is between the macaquqe and baboon here the score is 1264